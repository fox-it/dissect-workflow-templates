name: Dissect Self Hosted CI Template
on:
  workflow_call:
    inputs:
      run_tests:
        required: false
        type: boolean
        default: true
      run_linting:
        required: false
        type: boolean
        default: true

jobs:
  build:
    runs-on: ubuntu-latest-sh
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          lfs: true
      - run: git lfs pull
      - uses: actions/setup-python@v4
        with:
          python-version: "3.9"
          cache: "pip"
          cache-dependency-path: "pyproject.toml"
      - run: pip install "tox==4.2.4"
      - env:
          PIP_INDEX_URL: ${{ secrets.DISSECT_PIP_INDEX_URL }}
          C_INCLUDE_PATH: ${{ env.pythonLocation }}/include/python3.9
        run: tox run -e build
      - uses: actions/upload-artifact@v3
        with:
          name: packages
          path: dist/*
          retention-days: 1

  lint:
    needs: build
    runs-on: ubuntu-latest-sh
    steps:
      - if: ${{ inputs.run_linting == true }}
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          lfs: true
      - if: ${{ inputs.run_linting == true }}
        run: git lfs pull
      - if: ${{ inputs.run_linting == true }}
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"
          cache: "pip"
          cache-dependency-path: "pyproject.toml"
      - if: ${{ inputs.run_linting == true }}
        run: pip install "tox==4.2.4"
      - if: ${{ inputs.run_linting == true && github.ref_name == 'main' }}
        run: sed -i 's/\[tool.setuptools_scm\]/\[tool.setuptools_scm\]\nlocal_scheme = "no-local-version"/' pyproject.toml
      - if: ${{ inputs.run_linting == true }}
        env:
          C_INCLUDE_PATH: ${{ env.pythonLocation }}/include/python3.9
        run: tox run -e lint

  test:
    needs: build
    runs-on: ubuntu-latest-sh
    strategy:
      fail-fast: false
      matrix:
        include:
          - python-version: "3.9"
            python-include: "python3.9"
            tox-env: "py39"
          - python-version: "3.10"
            python-include: "python3.10"
            tox-env: "py310"
          - python-version: "3.11"
            python-include: "python3.11"
            tox-env: "py311"
          - python-version: "pypy3.9"
            python-include: "pypy3.9"
            tox-env: "pypy39"
    steps:
      - if: ${{ inputs.run_tests == true }}
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          lfs: true
      - if: ${{ inputs.run_tests == true }}
        run: git lfs pull
      - if: ${{ inputs.run_tests == true }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: "pip"
          cache-dependency-path: "pyproject.toml"
      - if: ${{ inputs.run_tests == true }}
        run: pip install "tox==4.2.4"
      - if: ${{ inputs.run_tests == true && github.ref_name == 'main' }}
        run: sed -i 's/\[tool.setuptools_scm\]/\[tool.setuptools_scm\]\nlocal_scheme = "no-local-version"/' pyproject.toml
      - if: ${{ inputs.run_tests == true }}
        env:
          PIP_INDEX_URL: ${{ secrets.DISSECT_PIP_INDEX_URL }}
          C_INCLUDE_PATH: ${{ env.pythonLocation }}/include/${{ matrix.python-include }}
        run: tox run -e ${{ matrix.tox-env }}
      - if: ${{ inputs.run_tests == true }}
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.DISSECT_CODECOV_TOKEN }}
          env_vars: PYTHON
          files: coverage.xml
          flags: unittests
          verbose: true
      - if: ${{ inputs.run_tests == true }}
        uses: actions/upload-artifact@v3
        with:
          name: coverage
          path: coverage.xml

  publish:
    needs: [lint, test]
    if: ${{ github.ref_name == 'main' || github.ref_type == 'tag' }}
    runs-on: ubuntu-latest-sh
    steps:
      - uses: actions/setup-python@v4
        with:
          python-version: "3.9"
      - uses: actions/download-artifact@v3
        with:
          name: packages
          path: dist/
      - uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: pip-cache-${{ runner.os }}-python-3.9-twine-4.0.0
          restore-keys: |
            pip-cache-${{ runner.os }}-python-3.9-twine-
            pip-cache-${{ runner.os }}-python-
      - run: pip install "twine==4.0.0"
      - env:
          TWINE_USERNAME: ${{ secrets.DISSECT_PRIVATE_PYPI_USERNAME }}
          TWINE_PASSWORD: ${{ secrets.DISSECT_PRIVATE_PYPI_PASSWORD }}
        run: twine upload --repository-url ${{ secrets.DISSECT_PRIVATE_PYPI_REPOSITORY }} dist/*
