name: Dissect CI Template
on:
  workflow_call:
    inputs:
      build-native:
        required: false
        type: boolean
        default: false
      run-linting:
        required: false
        type: boolean
        default: true
      run-tests:
        required: false
        type: boolean
        default: true
      run-docs:
        required: false
        type: boolean
        default: true
      run-benchmarks:
        required: false
        type: boolean
        default: false
      deb-packages:
        required: false
        type: string
        default: ""

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - if: ${{ inputs.deb-packages != '' }}
        run: sudo apt-get install -qq ${{ inputs.deb-packages }}

      - uses: fox-it/dissect-workflow-templates/.github/actions/git-checkout@main

      - uses: fox-it/dissect-workflow-templates/.github/actions/tox-run@main
        with:
          tox-environment: build

      - uses: actions/upload-artifact@v4
        with:
          name: packages
          path: dist/*
          retention-days: 1

  lint:
    needs: build
    runs-on: ubuntu-latest
    if: ${{ inputs.run-linting == true }}
    steps:
      - uses: fox-it/dissect-workflow-templates/.github/actions/git-checkout@main

      - uses: fox-it/dissect-workflow-templates/.github/actions/tox-run@main
        with:
          tox-environment: lint

  test:
    needs: build
    runs-on: ${{ matrix.os }}
    if: ${{ inputs.run-tests == true }}
    continue-on-error: ${{ matrix.allow_failure }}
    strategy:
      fail-fast: false
      matrix:
        os: ["ubuntu-latest", "windows-latest"]
        python-version: ["pypy3.10", "pypy3.11", "3.10", "3.11", "3.12", "3.13"]
        include:
          - allow_failure: false
            tox-version: "4.27.0"
            include-prefix: "python"
          - python-version: "pypy3.10"
            include-prefix: ""
            allow_failure: true
          - python-version: "pypy3.11"
            include-prefix: ""
            allow_failure: true
          - python-version: "3.12"
            allow_failure: true
          - python-version: "3.13"
            allow_failure: true
    steps:
      - if: ${{ inputs.deb-packages != '' && ! startsWith(matrix.os, 'windows') }}
        run: sudo apt-get install -qq ${{ inputs.deb-packages }}

      - uses: fox-it/dissect-workflow-templates/.github/actions/git-checkout@main

      - uses: fox-it/dissect-workflow-templates/.github/actions/tox-run@main
        with:
          tox-environment: ${{ matrix.python-version }}
          runner-os: ${{ matrix.os }}
          python-version: ${{ matrix.python-version }}
          include-prefix: ${{ matrix.include-prefix }}

      - uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.DISSECT_CODECOV_TOKEN }}
          env_vars: PYTHON
          files: coverage.xml
          flags: unittests
          verbose: true

  docs-build:
    needs: build
    runs-on: ubuntu-latest
    if: ${{ inputs.run-docs == true}}
    continue-on-error: true
    steps:
      - uses: fox-it/dissect-workflow-templates/.github/actions/git-checkout@main

      - uses: fox-it/dissect-workflow-templates/.github/actions/tox-run@main
        with:
          tox-environment: docs-build

  benchmark:
    needs: build
    runs-on: ubuntu-latest
    if: ${{ inputs.run-benchmarks == true}}
    continue-on-error: true
    steps:
      - uses: fox-it/dissect-workflow-templates/.github/actions/git-checkout@main

      - uses: actions/setup-python@v6
        with:
          python-version: "3.13"
          cache: "pip"
          cache-dependency-path: "pyproject.toml"

      - run: pip install "tox==4.27.0"

      - uses: CodSpeedHQ/action@v3
        with:
          run: tox run -e benchmark

  build-native:
    needs: build
    if: ${{ inputs.build-native == true}}
    runs-on: ${{ matrix.os }}
    continue-on-error: true
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            arch: x86_64
          - os: ubuntu-latest
            arch: i686
          - os: ubuntu-latest
            arch: ppc64le
          - os: ubuntu-latest
            arch: s390x
          - os: ubuntu-latest
            arch: riscv64
          - os: ubuntu-24.04-arm
            arch: aarch64
          - os: ubuntu-24.04-arm
            arch: armv7l
          - os: windows-latest
            arch: AMD64
          - os: windows-latest
            arch: x86
          - os: windows-11-arm
            arch: ARM64
          - os: macos-13
            arch: x86_64
          - os: macos-14
            arch: arm64
    steps:
      - uses: fox-it/dissect-workflow-templates/.github/actions/git-checkout@main

      - name: Setup QEMU (Linux)
        if: runner.os == 'Linux' && runner.arch == 'X64' && matrix.arch != 'x86_64'
        uses: docker/setup-qemu-action@v3
        with:
          platforms: linux/${{ matrix.arch }}

      - name: Setup Rust
        if: ${{ matrix.os != 'windows-11-arm' }}
        run: curl https://sh.rustup.rs -sSf | sh -s -- -y --default-toolchain stable

      - name: Setup Rust (Windows 11 ARM)
        if: ${{ matrix.os == 'windows-11-arm' }}
        run: |
          Invoke-WebRequest -Uri "https://win.rustup.rs/aarch64" -OutFile "$env:TEMP\rustup-init.exe"
           & "$env:TEMP\rustup-init.exe" -y
          "$env:USERPROFILE\.cargo\bin" | Out-File -Append -Encoding ascii $env:GITHUB_PATH
          "CARGO_HOME=$env:USERPROFILE\.cargo" | Out-File -Append -Encoding ascii $env:GITHUB_ENV
        shell: pwsh

      - name: Setup Python
        uses: actions/setup-python@v6
        with:
          python-version: "3.13"

      - id: pip-cache
        shell: bash
        run: |
          echo "dir=$(pip cache dir)" >> $GITHUB_OUTPUT

      - uses: actions/cache@v4
        with:
          path: ${{ steps.pip-cache.outputs.dir }}
          key: ${{ runner.os }}-${{ matrix.arch }}-pip-${{ hashFiles('pyproject.toml') }}
          restore-keys: ${{ runner.os }}-${{ matrix.arch }}-pip-

      - uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            ./**/_native.src/target/
          key: ${{ runner.os }}-${{ matrix.arch }}-cargo-${{ hashFiles('**/Cargo.lock', '**/Cargo.toml') }}
          restore-keys: ${{ runner.os }}-${{ matrix.arch }}-cargo-

      - name: Install cibuildwheel
        run: python -m pip install platformdirs cibuildwheel==3.1.4

      - id: cibuildwheel-cache
        shell: bash
        run: python -c "from platformdirs import user_cache_path; print('dir', user_cache_path(appname='cibuildwheel', appauthor='pypa'), sep='=')" >> $GITHUB_OUTPUT

      - uses: actions/cache@v4
        with:
          path: ${{ steps.cibuildwheel-cache.outputs.dir }}
          key: ${{ runner.os }}-${{ matrix.arch }}-cibuildwheel

        # This step removes the short hash and the build date from the resulting package name generated with tox
        # This should only occur when it gets actually pushed
        # We can't re-use the tox-run action here because we run tox from within cibuildwheel
      - if: ${{ github.ref_name == 'main' }}
        shell: bash
        run: sed -i.bak 's/\[tool.setuptools_scm\]/\[tool.setuptools_scm\]\nlocal_scheme = "no-local-version"/' pyproject.toml && rm -f pyproject.toml.bak

      - name: Build wheels
        run: python -m cibuildwheel --output-dir dist
        env:
          CIBW_ARCHS: ${{ matrix.arch }}
          # Rust needs to be installed in every Linux container and git-lfs is required for setuptools_scm to work properly
          CIBW_BEFORE_ALL_LINUX: |
            curl -sSf https://sh.rustup.rs | sh -s -- -y
            # Install git-lfs
            curl -s https://packagecloud.io/install/repositories/github/git-lfs/script.rpm.sh | bash || curl -s https://packagecloud.io/install/repositories/github/git-lfs/script.deb.sh | bash || true
            yum makecache || apt-get update || apk update || true
            yum install -y git-lfs || apt-get install -y git-lfs || apk add git-lfs || true
          # Add i686 target for Windows only when building for x86
          CIBW_BEFORE_ALL_WINDOWS: ${{ (matrix.arch == 'x86' && 'rustup target add i686-pc-windows-msvc') || '' }}
          # Configure for Rust builds and set the limited API to CPython 3.10
          CIBW_CONFIG_SETTINGS: --build-rust --build-option=--py-limited-api=cp310
          # Enable PyPy builds
          CIBW_ENABLE: pypy pypy-eol
          # Specific environment variables for each OS
          CIBW_ENVIRONMENT_LINUX: PATH="$HOME/.cargo/bin:$PATH"
          CIBW_ENVIRONMENT_MACOS: MACOSX_DEPLOYMENT_TARGET=10.12
          # There are no Rust releases for these architectures
          CIBW_SKIP: '*-musllinux_i686 *-musllinux_ppc64le *-musllinux_s390x *-musllinux_armv7l cp3??t-*'
          # Run tests
          CIBW_TEST_REQUIRES: tox
          CIBW_TEST_COMMAND: tox -e native -c {package}/tox.ini --installpkg {wheel}

      - name: Run abi3audit
        run: pip install abi3audit && abi3audit --strict --report dist/*-abi3-*.whl

      - uses: actions/upload-artifact@v4
        with:
          name: packages-native-${{ matrix.os }}-${{ matrix.arch }}
          path: dist/*
          retention-days: 1
