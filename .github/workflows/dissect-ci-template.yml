name: Dissect CI Template
on:
  workflow_call:
    inputs:
      run_tests:
        required: false
        type: boolean
        default: true
      run_linting:
        required: false
        type: boolean
        default: true
      deb-packages:
        required: false
        type: string
        default: ""

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - if: ${{ inputs.deb-packages != '' }}
        run: sudo apt-get install -qq ${{ inputs.deb-packages }}
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          lfs: true
      - run: git lfs pull
      - uses: actions/setup-python@v4
        with:
          python-version: "3.9"
          cache: "pip"
          cache-dependency-path: "pyproject.toml"
      - run: pip install "tox==4.2.4"
      - if: ${{ github.ref_name == 'main' }}
        run: sed -i 's/\[tool.setuptools_scm\]/\[tool.setuptools_scm\]\nlocal_scheme = "no-local-version"/' pyproject.toml
      - env:
          C_INCLUDE_PATH: ${{ env.pythonLocation }}/include/python3.9
        run: tox run -e build
      - uses: actions/upload-artifact@v3
        with:
          name: packages
          path: dist/*
          retention-days: 1

  lint:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - if: ${{ inputs.run_linting == true }}
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          lfs: true
      - if: ${{ inputs.run_linting == true }}
        run: git lfs pull
      - if: ${{ inputs.run_linting == true }}
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"
          cache: "pip"
          cache-dependency-path: "pyproject.toml"
      - if: ${{ inputs.run_linting == true }}
        run: pip install "tox==4.2.4"
      - if: ${{ inputs.run_linting == true && github.ref_name == 'main' }}
        run: sed -i 's/\[tool.setuptools_scm\]/\[tool.setuptools_scm\]\nlocal_scheme = "no-local-version"/' pyproject.toml
      - if: ${{ inputs.run_linting == true }}
        env:
          C_INCLUDE_PATH: ${{ env.pythonLocation }}/include/python3.9
        run: tox run -e lint

  test:
    needs: build
    runs-on: ${{ matrix.os }}
    continue-on-error: ${{ matrix.allow_failure }}
    strategy:
      fail-fast: false
      matrix:
        os: ["ubuntu-latest", "windows-latest"]
        python-version: ["3.9", "pypy3.9", "3.10", "3.11", "3.12"]
        include:
          - allow_failure: false
            tox-version: "4.2.4"
            include-prefix: "python"
          - python-version: "pypy3.9"
            include-prefix: ""
          - python-version: "3.12"
            allow_failure: true
          - os: "windows-latest"
            # There is a bug in tox < 4.4.0 (and Python 3.9) on Windows where parsing
            # commandlines from tox.ini files fails. This results in a failure when
            # using tox' envtmpdir in a pytest commandline.
            tox-version: "4.4.0"
    steps:
      - if: ${{ inputs.run_tests == true && inputs.deb-packages != '' && ! startsWith(matrix.os, 'windows') }}
        run: sudo apt-get install -qq ${{ inputs.deb-packages }}
      - if: ${{ inputs.run_tests == true }}
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          lfs: true
      - if: ${{ inputs.run_tests == true }}
        run: git lfs pull
      - if: ${{ inputs.run_tests == true }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: "pip"
          cache-dependency-path: "pyproject.toml"
      - if: ${{ inputs.run_tests == true }}
        run: pip install "tox==${{ matrix.tox-version }}"
      - if: ${{ inputs.run_tests == true && github.ref_name == 'main'  && ! startsWith(matrix.os, 'windows') }}
        run: sed -i 's/\[tool.setuptools_scm\]/\[tool.setuptools_scm\]\nlocal_scheme = "no-local-version"/' pyproject.toml
      - if: ${{ inputs.run_tests == true }}
        env:
          C_INCLUDE_PATH: ${{ env.pythonLocation }}/include/${{ matrix.include-prefix }}${{ matrix.python-version }}
        run: tox run -e ${{ matrix.python-version }}
      - if: ${{ inputs.run_tests == true }}
        uses: codecov/codecov-action@v3
        with:
          env_vars: PYTHON
          files: coverage.xml
          flags: unittests
          verbose: true
      - if: ${{ inputs.run_tests == true }}
        uses: actions/upload-artifact@v3
        with:
          name: coverage
          path: coverage.xml
