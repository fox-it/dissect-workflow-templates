name: Dissect CI Template
on:
  workflow_call:
    inputs:
      run_tests:
        required: false
        type: boolean
        default: true
      run_linting:
        required: false
        type: boolean
        default: true
      run_docs:
        required: false
        type: boolean
        default: true
      deb-packages:
        required: false
        type: string
        default: ""

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - if: ${{ inputs.deb-packages != '' }}
        run: sudo apt-get install -qq ${{ inputs.deb-packages }}
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      # Caching LFS objects
      - name: Create LFS file list
        run: git lfs ls-files --long | cut -d ' ' -f1 | sort > .lfs-assets-id
      - name: Cache LFS
        uses: actions/cache@v4
        with:
          path: .git/lfs
          key: lfs-${{ hashFiles('.lfs-assets-id') }}-v1
      - name: Pull LFS
        run: git lfs pull

      - uses: actions/setup-python@v5
        with:
          python-version: "3.9"
          cache: "pip"
          cache-dependency-path: "pyproject.toml"
      - run: pip install "tox==4.4.3"
      - if: ${{ github.ref_name == 'main' }}
        run: sed -i 's/\[tool.setuptools_scm\]/\[tool.setuptools_scm\]\nlocal_scheme = "no-local-version"/' pyproject.toml
      - env:
          C_INCLUDE_PATH: ${{ env.pythonLocation }}/include/python3.9
        run: tox run -e build
      - uses: actions/upload-artifact@v4
        with:
          name: packages
          path: dist/*
          retention-days: 1

  lint:
    needs: build
    runs-on: ubuntu-latest
    if: ${{ inputs.run_linting == true }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Caching LFS objects
      - name: Create LFS file list
        run: git lfs ls-files --long | cut -d ' ' -f1 | sort > .lfs-assets-id
      - name: Cache LFS
        uses: actions/cache@v4
        with:
          path: .git/lfs
          key: lfs-${{ hashFiles('.lfs-assets-id') }}-v1
      - name: Pull LFS
        run: git lfs pull

      - uses: actions/setup-python@v5
        with:
          python-version: "3.9"
          cache: "pip"
          cache-dependency-path: "pyproject.toml"
      - run: pip install "tox==4.4.3"
      - run: sed -i 's/\[tool.setuptools_scm\]/\[tool.setuptools_scm\]\nlocal_scheme = "no-local-version"/' pyproject.toml
      - env:
          C_INCLUDE_PATH: ${{ env.pythonLocation }}/include/python3.9
        run: tox run -e lint

  docs-build:
    needs: build
    runs-on: ubuntu-latest
    if: ${{ inputs.run_docs == true}}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Create LFS file list
        run: git lfs ls-files --long | cut -d ' ' 0f1 | sort > .lfs-assets-id
      - name: Cache LFS
        uses: actions/cache@v4
        with:
          path: .git/lfs
          key: lfs-${{ hashFiles('.lfs-assets-id') }}-v1
      - name: Pull LFS
        run: git lfs pull

      - uses: actions/setup-python@v5
        with:
          python-version: "3.9"
          cache: "pip"
          cache-dependency-path: "pyproject.toml"
      - run: pip install "tox==4.4.3"
      - env:
          C_INCLUDE_PATH: ${{ env.pythonLocation }}/include/python3.9
        run: tox run -e docs-build 


  test:
    needs: build
    runs-on: ${{ matrix.os }}
    if: ${{ inputs.run_tests == true }}
    continue-on-error: ${{ matrix.allow_failure }}
    strategy:
      fail-fast: false
      matrix:
        os: ["ubuntu-latest", "windows-latest"]
        python-version: ["3.9", "pypy3.9", "pypy3.10", "pypy3.11", "3.10", "3.11", "3.12", "3.13"]
        include:
          - allow_failure: false
            tox-version: "4.4.3"
            include-prefix: "python"
          - python-version: "pypy3.9"
            include-prefix: ""
          - python-version: "pypy3.9"
            os: "windows-latest"
            include-prefix: ""
            allow_failure: true
          - python-version: "pypy3.10"
            include-prefix: ""
            allow_failure: true
          - python-version: "pypy3.11"
            include-prefix: ""
            allow_failure: true
          - python-version: "3.12"
            allow_failure: true
          - python-version: "3.13"
            allow_failure: true
    steps:
      - if: ${{ inputs.deb-packages != '' && ! startsWith(matrix.os, 'windows') }}
        run: sudo apt-get install -qq ${{ inputs.deb-packages }}
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      # Caching LFS objects
      - name: Create LFS file list
        run: git lfs ls-files --long | cut -d ' ' -f1 | sort > .lfs-assets-id
      - name: Cache LFS
        uses: actions/cache@v4
        with:
          path: .git/lfs
          key: lfs-${{ hashFiles('.lfs-assets-id') }}-v1
      - name: Pull LFS
        run: git lfs pull

      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: "pip"
          cache-dependency-path: "pyproject.toml"
      - run: pip install "tox==${{ matrix.tox-version }}"
      - if: ${{ github.ref_name == 'main'  && ! startsWith(matrix.os, 'windows') }}
        run: sed -i 's/\[tool.setuptools_scm\]/\[tool.setuptools_scm\]\nlocal_scheme = "no-local-version"/' pyproject.toml
      - env:
          C_INCLUDE_PATH: ${{ env.pythonLocation }}/include/${{ matrix.include-prefix }}${{ matrix.python-version }}
        run: tox run -e ${{ matrix.python-version }}
      - uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.DISSECT_CODECOV_TOKEN }}
          env_vars: PYTHON
          files: coverage.xml
          flags: unittests
          verbose: true
